//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        assign: assign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp LT &kp MINUS &kp SPACE>;
            label = "ASSIGN";
        };

        pipe: pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp PIPE &kp GT &kp SPACE>;
            label = "PIPE";
        };
    };

    behaviors {
        lt_assign: lt_assign {
            compatible = "zmk,behavior-tap-dance";
            label = "LT_ASSIGN";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&assign>;
        };

        gt_pipe: gt_pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "GT_PIPE";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&pipe>;
        };

        voldn_mute: voldn_mute {
            compatible = "zmk,behavior-tap-dance";
            label = "VOLDN_MUTE";
            #binding-cells = <0>;
            bindings = <&kp K_VOL_DN>, <&kp K_MUTE>;
        };

        next_playpause: next_playpause {
            compatible = "zmk,behavior-tap-dance";
            label = "NEXT_PLAYPAUSE";
            #binding-cells = <0>;
            bindings = <&kp C_NEXT>, <&kp C_PLAY_PAUSE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
           &kp Q       &kp W       &kp E        &kp R            &kp T        &kp Y        &kp U        &kp I         &kp O       &kp P
           &mt LGUI A  &mt LALT S  &mt LCTRL D  &mt LSHFT F      &kp G        &kp H        &mt RSHFT J  &mt RCTRL K   &mt RALT L  &mt RGUI SEMICOLON
&kp GRAVE  &kp Z       &kp X       &kp C        &kp V            &kp B        &kp N        &kp M        &kp COMMA     &kp PERIOD  &kp SLASH           &kp SINGLE_QUOTE
                                   &kp ESC      &lt 1 BACKSPACE  &lt 2 TAB    &lt 2 ENTER  &lt 3 SPACE  &lt 4 DELETE
            >;
        };

        vim_layer {
            bindings = <
        &kp LG(Q)  &kp LG(W)  &kp LC(UP)  &kp LC(DOWN)  &kp F13          &kp CARET       &kp LBKT        &kp RBKT       &lt_assign       &gt_pipe
        &kp LSHFT  &kp LCTRL  &kp LALT    &kp LGUI      &trans           &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW  &kp END
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)   &kp LG(V)     &kp LG(LS(Z))    &kp HOME        &kp RBRC        &kp LBRC       &kp HASH         &kp STAR  &kp PRCNT
                              &trans      &trans        &trans           &kp COLON       &kp RG(SPACE)   &kp RA(SPACE)
            >;

            label = "VIM";
        };

        num_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "NUM";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃           ┃           ┃     UP    ┃           ┃     {     ┃   ┃     }     ┃     7     ┃     8     ┃     9     ┃     +     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃   SHIFT   ┃   LEFT    ┃    DOWN   ┃   RIGHT   ┃     [     ┃   ┃     ]     ┃     4     ┃     5     ┃     6     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃   P UP    ┃  C LOCK   ┃  P DOWN   ┃     (     ┃   ┃     )     ┃     1     ┃     2     ┃     3     ┃     *     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    TAB    ┃    SPC    ┃   ┃    DEL    ┃     0     ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
         &kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3      &kp NUMBER_4       &kp NUMBER_5    &kp NUMBER_6          &kp NUMBER_7   &kp NUMBER_8    &kp NUMBER_9    &kp NUMBER_0
         &mt LSHFT EXCL  &mt LCTRL AT  &mt LALT HASH     &mt LGUI DLLR      &kp PRCNT       &kp CARET             &mt RGUI AMPS  &mt RMETA STAR  &mt RCTRL LPAR  &mt RSHFT RPAR
&kp F12  &kp F1          &kp F2        &kp F3            &kp F4             &kp F5          &kp F6                &kp F7         &kp F8          &kp F9          &kp F10         &kp F11
                                       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SLASH       &kp NON_US_BACKSLASH  &kp MINUS      &kp EQUAL
            >;
        };

        hot_layer {
            bindings = <
                           &kp LG(LC(LA(LS(Q))))  &kp LG(LC(LA(LS(W))))  &kp LG(LC(LA(LS(E))))  &kp LG(LC(LA(LS(R))))  &kp LG(LC(LA(LS(T))))    &kp LG(LC(LA(LS(Y))))  &kp LG(LC(LA(LS(U))))  &kp LG(LC(LA(LS(I))))      &kp LG(LC(LA(LS(O))))    &kp LG(LC(LA(LS(P))))
                           &kp LG(LC(LA(LS(A))))  &kp LG(LC(LA(LS(S))))  &kp LG(LC(LA(LS(D))))  &kp LG(LC(LA(LS(F))))  &kp LG(LC(LA(LS(G))))    &kp LG(LC(LA(LS(H))))  &kp LG(LC(LA(LS(J))))  &kp LG(LC(LA(LS(K))))      &kp LG(LC(LA(LS(L))))    &kp LG(LC(LA(LS(SEMI))))
&kp LG(LC(LA(LS(GRAVE))))  &kp LG(LC(LA(LS(Z))))  &kp LG(LC(LA(LS(X))))  &kp LG(LC(LA(LS(C))))  &kp LG(LC(LA(LS(V))))  &kp LG(LC(LA(LS(B))))    &kp LG(LC(LA(LS(N))))  &kp LG(LC(LA(LS(M))))  &kp LG(LC(LA(LS(COMMA))))  &kp LG(LC(LA(LS(DOT))))  &kp LG(LC(LA(LS(FSLH))))  &kp LG(LC(LA(LS(APOS))))
                                                                         &trans                 &kp F18                &trans                   &trans                 &trans                 &trans
            >;

            label = "HOT";
        };

        ctrl_layer {
            bindings = <
          &trans       &trans        &trans      &trans           &trans    &trans  &trans  &trans  &trans  &trans
          &voldn_mute  &kp C_VOL_UP  &kp C_PREV  &next_playpause  &trans    &trans  &trans  &trans  &trans  &trans
&kp CAPS  &trans       &trans        &trans      &trans           &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                     &trans      &trans           &trans    &trans  &trans  &trans
            >;

            label = "CTRL";
        };
    };
};
